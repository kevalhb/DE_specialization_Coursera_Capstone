{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.1", "generated_at": "2024-12-22T05:21:25.404984Z", "invocation_id": "b97873fd-842c-46e9-904f-8846d6754fd2", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-22T05:21:23.940881Z", "completed_at": "2024-12-22T05:21:24.057456Z"}, {"name": "execute", "started_at": "2024-12-22T05:21:24.058520Z", "completed_at": "2024-12-22T05:21:24.360870Z"}], "thread_id": "Thread-1", "execution_time": 0.42402219772338867, "adapter_response": {"_message": "SELECT 1095", "code": "SELECT", "rows_affected": 1095}, "message": "SELECT 1095", "failures": null, "unique_id": "model.classicmodels_modeling.dates", "compiled": true, "compiled_code": "\n    \nwith base_dates as (\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1095\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2003-01-01' as timestamp) + ((interval '1 day') * ((row_number() over (order by 1) - 1)))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2005-12-31' as timestamp)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as timestamp) as date_day\nfrom\n    date_spine d\n\n\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast(\n\n    d.date_day + ((interval '1 year') * (-1))\n\n as date) as prior_year_date_day,\n        cast(\n\n    d.date_day + ((interval '1 day') * (-364))\n\n as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    cast(\n\n    d.date_day + ((interval '1 day') * (-1))\n\n as date) as prior_date_day,\n    cast(\n\n    d.date_day + ((interval '1 day') * (1))\n\n as date) as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    -- Monday(1) to Sunday (7)\n        cast(date_part('isodow', d.date_day) as integer) as day_of_week,\n\n    to_char(d.date_day, 'FMDay') as day_of_week_name,\n    to_char(d.date_day, 'FMDy') as day_of_week_name_short,\n    date_part('day', d.date_day) as day_of_month,\n    date_part('doy', d.date_day) as day_of_year,\n\n    -- Sunday as week start date\ncast(\n\n    date_trunc('week', \n\n    d.date_day + ((interval '1 day') * (1))\n\n) + ((interval '1 day') * (-1))\n\n as date) as week_start_date,\n    cast(\n\n    -- Sunday as week start date\ncast(\n\n    date_trunc('week', \n\n    d.date_day + ((interval '1 day') * (1))\n\n) + ((interval '1 day') * (-1))\n\n as date) + ((interval '1 day') * (6))\n\n as date) as week_end_date,\n    -- Sunday as week start date\ncast(\n\n    date_trunc('week', \n\n    d.prior_year_over_year_date_day + ((interval '1 day') * (1))\n\n) + ((interval '1 day') * (-1))\n\n as date) as prior_year_week_start_date,\n    cast(\n\n    -- Sunday as week start date\ncast(\n\n    date_trunc('week', \n\n    d.prior_year_over_year_date_day + ((interval '1 day') * (1))\n\n) + ((interval '1 day') * (-1))\n\n as date) + ((interval '1 day') * (6))\n\n as date) as prior_year_week_end_date,\n    \ncast(to_char(d.date_day, 'WW') as integer) as week_of_year,\n\n    cast(date_trunc('week', d.date_day) as date) as iso_week_start_date,\n    cast(\n\n    cast(date_trunc('week', d.date_day) as date) + ((interval '1 day') * (6))\n\n as date) as iso_week_end_date,\n    cast(date_trunc('week', d.prior_year_over_year_date_day) as date) as prior_year_iso_week_start_date,\n    cast(\n\n    cast(date_trunc('week', d.prior_year_over_year_date_day) as date) + ((interval '1 day') * (6))\n\n as date) as prior_year_iso_week_end_date,\n    -- postgresql week is isoweek, the first week of a year containing January 4 of that year.\ncast(date_part('week', d.date_day) as integer) as iso_week_of_year,\n\n    \ncast(to_char(d.prior_year_over_year_date_day, 'WW') as integer) as prior_year_week_of_year,\n    -- postgresql week is isoweek, the first week of a year containing January 4 of that year.\ncast(date_part('week', d.prior_year_over_year_date_day) as integer) as prior_year_iso_week_of_year,\n\n    cast(date_part('month', d.date_day) as integer) as month_of_year,\n    to_char(d.date_day, 'FMMonth')  as month_name,\n    to_char(d.date_day, 'FMMon')  as month_name_short,\n\n    cast(date_trunc('month', d.date_day) as date) as month_start_date,\n    cast(cast(\n        \n\n    \n\n    date_trunc('month', d.date_day) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as date) as month_end_date,\n\n    cast(date_trunc('month', d.prior_year_date_day) as date) as prior_year_month_start_date,\n    cast(cast(\n        \n\n    \n\n    date_trunc('month', d.prior_year_date_day) + ((interval '1 month') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as date) as prior_year_month_end_date,\n\n    cast(date_part('quarter', d.date_day) as integer) as quarter_of_year,\n    cast(date_trunc('quarter', d.date_day) as date) as quarter_start_date,\n    \n    cast(\n\n    \n\n    date_trunc('quarter', d.date_day) + ((interval '1 month') * (3))\n\n + ((interval '1 day') * (-1))\n\n as date) as quarter_end_date,\n\n    cast(date_part('year', d.date_day) as integer) as year_number,\n    cast(date_trunc('year', d.date_day) as date) as year_start_date,\n    cast(cast(\n        \n\n    \n\n    date_trunc('year', d.date_day) + ((interval '1 year') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date) as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n\n", "relation_name": "\"postgres\".\"classicmodels_star_schema\".\"dates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-22T05:21:24.389328Z", "completed_at": "2024-12-22T05:21:24.427329Z"}, {"name": "execute", "started_at": "2024-12-22T05:21:24.428621Z", "completed_at": "2024-12-22T05:21:24.600516Z"}], "thread_id": "Thread-1", "execution_time": 0.21894097328186035, "adapter_response": {"_message": "SELECT 122", "code": "SELECT", "rows_affected": 122}, "message": "SELECT 122", "failures": null, "unique_id": "model.classicmodels_modeling.dim_customers", "compiled": true, "compiled_code": "SELECT \n    md5(cast(coalesce(cast(customerNumber as TEXT), '') as TEXT))  as customer_key, \n    customerName as customer_name,   \n    contactLastName as customer_last_name, \n    contactFirstName as customer_first_name, \n    phone as phone, \n    addressLine1 as address_line_1, \n    addressLine2 as address_line_2, \n    postalCode as postal_code, \n    city as city, \n    state as state, \n    country as country,\n    creditLimit as credit_limit\nFROM classicmodels.customers", "relation_name": "\"postgres\".\"classicmodels_star_schema\".\"dim_customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-22T05:21:24.613243Z", "completed_at": "2024-12-22T05:21:24.623906Z"}, {"name": "execute", "started_at": "2024-12-22T05:21:24.625390Z", "completed_at": "2024-12-22T05:21:24.715239Z"}], "thread_id": "Thread-1", "execution_time": 0.10692453384399414, "adapter_response": {"_message": "SELECT 23", "code": "SELECT", "rows_affected": 23}, "message": "SELECT 23", "failures": null, "unique_id": "model.classicmodels_modeling.dim_employees", "compiled": true, "compiled_code": "SELECT\n    md5(cast(coalesce(cast(employeeNumber as TEXT), '') as TEXT))  as employee_key,\n    lastName as employee_last_name, \n    firstName as employee_first_name, \n    jobTitle as job_title, \n    email as email\nFROM classicmodels.employees", "relation_name": "\"postgres\".\"classicmodels_star_schema\".\"dim_employees\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-22T05:21:24.734299Z", "completed_at": "2024-12-22T05:21:24.761244Z"}, {"name": "execute", "started_at": "2024-12-22T05:21:24.764721Z", "completed_at": "2024-12-22T05:21:24.918513Z"}], "thread_id": "Thread-1", "execution_time": 0.19321966171264648, "adapter_response": {"_message": "SELECT 7", "code": "SELECT", "rows_affected": 7}, "message": "SELECT 7", "failures": null, "unique_id": "model.classicmodels_modeling.dim_offices", "compiled": true, "compiled_code": "SELECT \n    \n    md5(cast(coalesce(cast(officeCode as TEXT), '') as TEXT))  as office_key, \n    postalCode as postal_code, \n    city as city, \n    state as state, \n    country as country, \n    territory as territory\nFROM classicmodels.offices", "relation_name": "\"postgres\".\"classicmodels_star_schema\".\"dim_offices\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-22T05:21:24.930568Z", "completed_at": "2024-12-22T05:21:24.951099Z"}, {"name": "execute", "started_at": "2024-12-22T05:21:24.952038Z", "completed_at": "2024-12-22T05:21:25.067443Z"}], "thread_id": "Thread-1", "execution_time": 0.14059042930603027, "adapter_response": {"_message": "SELECT 110", "code": "SELECT", "rows_affected": 110}, "message": "SELECT 110", "failures": null, "unique_id": "model.classicmodels_modeling.dim_products", "compiled": true, "compiled_code": "SELECT \n    md5(cast(coalesce(cast(productCode as TEXT), '') as TEXT)) as product_key, \n    productName as product_name, \n    products.productLine as product_line, \n    productScale as product_scale, \n    productVendor as product_vendor,\n    productDescription as product_description, \n    textDescription as product_line_description\nFROM classicmodels.products\nJOIN classicmodels.productlines ON products.productLine=productlines.productLine", "relation_name": "\"postgres\".\"classicmodels_star_schema\".\"dim_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-22T05:21:25.078242Z", "completed_at": "2024-12-22T05:21:25.115610Z"}, {"name": "execute", "started_at": "2024-12-22T05:21:25.116926Z", "completed_at": "2024-12-22T05:21:25.238659Z"}], "thread_id": "Thread-1", "execution_time": 0.16434764862060547, "adapter_response": {"_message": "SELECT 2996", "code": "SELECT", "rows_affected": 2996}, "message": "SELECT 2996", "failures": null, "unique_id": "model.classicmodels_modeling.fact_orders", "compiled": true, "compiled_code": "SELECT \n    md5(cast(coalesce(cast(orders.orderNumber as TEXT), '') || '-' || coalesce(cast(orderdetails.orderLineNumber as TEXT), '') as TEXT)) as fact_order_key,\n    md5(cast(coalesce(cast(customers.customerNumber as TEXT), '') as TEXT)) AS customer_key, \n    md5(cast(coalesce(cast(employees.employeeNumber as TEXT), '') as TEXT)) AS employee_key,\n    md5(cast(coalesce(cast(offices.officeCode as TEXT), '') as TEXT)) AS office_key,\n    md5(cast(coalesce(cast(orderdetails.productCode as TEXT), '') as TEXT)) AS product_key, \n    orders.orderDate AS order_date,\n    orders.requiredDate AS order_required_date, \n    orders.shippedDate AS order_shipped_date,\n    orderdetails.quantityOrdered AS quantity_ordered, \n    orderdetails.priceEach AS product_price\nFROM classicmodels.orders\nJOIN classicmodels.orderdetails ON orders.orderNumber = orderdetails.orderNumber\nJOIN classicmodels.customers ON orders.customerNumber = customers.customerNumber\nJOIN classicmodels.employees ON customers.salesRepEmployeeNumber = employees.employeeNumber\nJOIN classicmodels.offices ON employees.officeCode = offices.officeCode", "relation_name": "\"postgres\".\"classicmodels_star_schema\".\"fact_orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-22T05:21:25.250097Z", "completed_at": "2024-12-22T05:21:25.257232Z"}, {"name": "execute", "started_at": "2024-12-22T05:21:25.258684Z", "completed_at": "2024-12-22T05:21:25.349565Z"}], "thread_id": "Thread-1", "execution_time": 0.10327768325805664, "adapter_response": {"_message": "SELECT 1095", "code": "SELECT", "rows_affected": 1095}, "message": "SELECT 1095", "failures": null, "unique_id": "model.classicmodels_modeling.dim_dates", "compiled": true, "compiled_code": "WITH date_dimension as (select * from \"postgres\".\"classicmodels_star_schema\".\"dates\")\n\nSELECT\n    date_day,\n    day_of_week,\n    day_of_month,\n    day_of_year,\n    week_of_year,\n    month_of_year,\n    month_name,\n    quarter_of_year,\n    year_number\nFROM\n    date_dimension d", "relation_name": "\"postgres\".\"classicmodels_star_schema\".\"dim_dates\""}], "elapsed_time": 1.7403850555419922, "args": {"vars": {}, "warn_error_options": {"include": [], "exclude": []}, "profiles_dir": "/home/ec2-user/.dbt", "log_format": "default", "quiet": false, "use_colors": true, "exclude": [], "introspect": true, "write_json": true, "empty": false, "use_colors_file": true, "source_freshness_run_project_hooks": false, "favor_state": false, "populate_cache": true, "print": true, "log_format_file": "debug", "partial_parse_file_diff": true, "version_check": true, "strict_mode": false, "log_path": "/home/ec2-user/environment/classicmodels_modeling/logs", "enable_legacy_logger": false, "show_resource_report": false, "invocation_command": "dbt run -s star_schema", "select": ["star_schema"], "defer": false, "static_parser": true, "project_dir": "/home/ec2-user/environment/classicmodels_modeling", "printer_width": 80, "require_explicit_package_overrides_for_builtin_materializations": true, "partial_parse": true, "send_anonymous_usage_stats": true, "macro_debugging": false, "log_level_file": "debug", "log_level": "info", "cache_selected_only": false, "indirect_selection": "eager", "which": "run", "log_file_max_bytes": 10485760, "require_resource_names_without_spaces": false}}